// Copyright 2020 The Measurement Proto Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/data_provider.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "DataProviderRegistrationServiceProto";

// Kingdom service for registration of `DataProvider`s.
service DataProviderRegistration {
  // Creates (registers) a `DataProvider`.
  rpc CreateDataProvider(CreateDataProviderRequest) returns (DataProvider) {}

  // Creates (registers) a `EventGroup` defined in the specified
  // `DataProvider`'s system.
  rpc CreateEventGroup(CreateEventGroupRequest) returns (EventGroup) {}
}

// Request message for CreateDataProvider method.
message CreateDataProviderRequest {
  // The DataProvider to create. Required. The `key` field will be ignored, and
  // the system will assign an ID.
  DataProvider data_provider = 1;
}

// Request message for CreateEventGroup method.
message CreateEventGroupRequest {
  // Resource key of the parent `DataProvider`. Required.
  DataProvider.Key parent = 1;

  // The `EventGroup` to create. Required.
  //
  // The `key` field will be ignored, and the system will assign an ID. Results
  // in an ALREADY_EXISTS error if there is already a child `EventGroup` with
  // the same `event_group_reference_id`.
  EventGroup event_group = 2;
}
