// Copyright 2020 The Measurement Proto Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v1alpha;

import "google/protobuf/timestamp.proto";
import "wfa/measurement/api/v1alpha/sketch.proto";

option java_package = "org.wfanet.measurement.api.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionProto";

// A requisition for a single metric for a single campaign.
message MetricRequisition {
  message Key {
    string data_provider_id = 1;
    string campaign_id = 2;
    string metric_requisition_id = 3;
  }
  // Resource key.
  Key key = 1;

  // A time interval for a requisition.
  message TimeInterval {
    // Start of the time interval, inclusive. Required.
    google.protobuf.Timestamp start_time = 1;
    // End of the time interval, exclusive. Required. This must be later than
    // the start time.
    google.protobuf.Timestamp end_time = 2;
  }
  // The time interval of metric collection.
  TimeInterval collection_interval = 2;

  // State of a metrics requisition.
  enum State {
    // Default value if state is omitted. Should never be used.
    STATE_UNSPECIFIED = 0;
    // No metric value has been sent to fulfill this requisition.
    UNFULFILLED = 1;
    // A metric value has been sent to fulfill this requisition.
    FULFILLED = 2;
  }
  // The state of this requisition. Output-only.
  State state = 3;

  // Definition of metric that's needed to fulfill this requisition. Required.
  MetricDefinition metric_definition = 4;
}

// Representation of a metric to be collected.
message MetricDefinition {
  // Exactly one of these must be specified.
  oneof definition {
    // A metric to be collected as a sketch.
    SketchMetricDefinition sketch = 1;
  }

  // (--TODO(sanjayvas): Figure out which other metrics are needed (e.g.
  // non-deduped impression count?) --).

  // (--TODO(sanjayvas): Figure out how to support slicing/filtering. --)
}

// Representation of a metric to be collected as a sketch.
message SketchMetricDefinition {
  // Type of metric to be collected. Each value here should have a corresponding
  // Sketch field in MetricSet.
  enum Type {
    // Default value. Should never be used.
    TYPE_UNSPECIFIED = 0;
    // Impression reach (cardinality).
    IMPRESSION_REACH = 1;
    // Impression reach with frequency.
    IMPRESSION_REACH_AND_FREQUENCY = 2;
  }
  // The type of this SketchMetric. Required.
  Type type = 1;

  // Resource key of the sketch configuration. Required.
  SketchConfig.Key sketch_config = 2;
}
