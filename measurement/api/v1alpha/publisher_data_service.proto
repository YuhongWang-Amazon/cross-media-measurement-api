syntax = "proto3";

package wfa.measurement.api.v1alpha;

import "measurement/api/v1alpha/crypto.proto";
import "measurement/api/v1alpha/data_provider.proto";
import "measurement/api/v1alpha/metric.proto";
import "measurement/api/v1alpha/requisition.proto";

option java_package = "org.wfanet.measurement.api.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "PublisherDataServiceProto";

// Service for data providers to interact with publisher data.
service PublisherData {
  // Returns the combined public key with the specified version.
  rpc GetCombinedPublicKey(GetCombinedPublicKeyRequest)
      returns (CombinedPublicKey) {}

  // Returns the metric requisitions for the specified campaign.
  rpc ListCampaignMetricsRequisitions(ListCampaignMetricsRequisitionsRequest)
      returns (ListCampaignMetricsRequisitionsResponse) {}

  // Creates (sets) a Metric for the specified parent requisition.
  rpc CreateMetric(CreateMetricRequest) returns (Metric) {}

  // Upload a Metric in a compact form via streaming.
  rpc UploadMetric(stream UploadMetricRequest) returns (UploadMetricResponse) {}
}

// Request message for GetCombinedPublicKey method.
message GetCombinedPublicKeyRequest {
  // Resource key of the CombinedPublicKey. Required.
  CombinedPublicKey.Key key = 1;
}

// Request message for ListCampaignMetricsRequisitions method.
message ListCampaignMetricsRequisitionsRequest {
  // Resource key of the parent Campaign. Required. The campaign ID may be
  // omitted to list across all campaigns for the specified data provider.
  Campaign.Key parent = 1;

  // The maximum number of resources to return. See https://aip.dev/158.
  int32 page_size = 2;
  // A token from a previous call, specified to retrieve the next page. See
  // https://aip.dev/158.
  string page_token = 3;

  // Filter criteria. Repeated fields are treated as logical ORs, and multiple
  // fields specified as logical ANDs.
  message Filter {
    repeated MetricsRequisition.State states = 1;
  }
  // Result filter. If a page token is specified, then this will be ignored and
  // the filter for the first page will be applied.
  Filter filter = 4;
}

// Response message for ListCampaignMetricsRequisitions method.
message ListCampaignMetricsRequisitionsResponse {
  // The CampaignMetricsRequisition resources.
  repeated CampaignMetricsRequisition campaign_metrics_requisitions = 1;

  // A token that can be specified in a subsequent call to retrieve the next
  // page. See https://aip.dev/158.
  string next_page_token = 2;
}

// Request message for CreateMetric method.
message CreateMetricRequest {
  // Resource key of the parent CampaignMetricsRequisition. Required.
  CampaignMetricsRequisition.Key parent = 1;

  // The Metric to create. Required. The `key` field will be ignored.
  Metric metric = 2;

  // The resource ID of the Metric. Required. This is the index of the
  // corresponding MetricDefinition in the parent CampaignMetricsRequisition.
  int64 metric_id = 3;
}

// Request message for UploadMetric method.
message UploadMetricRequest {
  // The header message for this streaming request.
  message Header {
    // Resource key of the parent CampaignMetricsRequisition. Required.
    CampaignMetricsRequisition.Key metrics_requisition = 1;

    // The resource ID of the Metric. Required.
    int64 metric_id = 2;

    // Resource key of the combined public key used to encrypt any sketch
    // registers.
    CombinedPublicKey.Key combined_public_key = 3;
  }

  // The chunk message for this streaming request.
  message Chunk {
    // The offset in number of bytes of the total data for a Metric. This
    // **must** be equal to the sum of the size of all previous chunk data sent
    // in this streaming request.
    int64 offset_bytes = 1;

    // Whether this is the final Chunk for a Metric. It is an error to send a
    // subsequent Chunk for a Metric after one where this value is `true`.
    bool final_chunk = 2;

    // The portion of the data for this Chunk. Required.
    //
    // If the corresponding MetricDefinition is a sketch, this is the register
    // data as documented in the Sketch message (sketch.proto). The only
    // alignment requirement is by bytes: a chunk might begin or end in the
    // middle of a single register.
    //
    // (--TODO(sanjayvas): Document requirements for chunk data size. --)
    bytes data = 3;
  }

  // Request message payload. Exactly one of these must be specified.
  oneof payload {
    // The header for this streaming request, specified as the payload for the
    // first request message.
    Header header = 1;

    // The chunk for this streaming request, specified on subsequent request
    // messages to the first one containing the header.
    Chunk chunk = 2;
  }
}

// Response message for UploadMetric method.
message UploadMetricResponse {
  // Resource key of uploaded Metric.
  Metric.Key metric = 1;
}
